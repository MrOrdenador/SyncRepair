plugins {
    id 'fabric-loom' version '1.11.4'
    id 'maven-publish'
}

def minecraftVersion = '1.21'
def yarnMappings = '1.21+build.8'
def loaderVersion = '0.16.14'
def fabricVersion = '0.100.7+1.21'

version = project.hasProperty('mod_version') ? project.mod_version : '1.0.0+1.21'
group = project.hasProperty('maven_group') ? project.maven_group : 'com.mrordenador'
base {
    archivesName = project.hasProperty('archives_base_name') ? project.archives_base_name : 'syncrepair'
}

repositories {
    mavenCentral()
    maven {
        name = 'Fabric'
        url = 'https://maven.fabricmc.net/'
    }
    maven {
        name = 'Shedaniel Maven'
        url = 'https://maven.shedaniel.me/'
    }
    maven {
        name = 'TerraformersMC'
        url = 'https://maven.terraformersmc.com/releases/'
    }
}

loom {
    splitEnvironmentSourceSets()

    mods {
        syncrepair {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraftVersion}"
    mappings "net.fabricmc:yarn:${yarnMappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${loaderVersion}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabricVersion}"

    modApi "me.shedaniel.cloth:cloth-config-fabric:15.0.140"
    include "me.shedaniel.cloth:cloth-config-fabric:15.0.140"

    modImplementation "com.terraformersmc:modmenu:11.0.1"
}

processResources {
    inputs.property "version", version
    inputs.property "minecraft_version", minecraftVersion
    inputs.property "loader_version", loaderVersion

    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": version,
               "minecraft_version": minecraftVersion,
               "loader_version": loaderVersion
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}" }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        // Add publishing repositories here if needed
    }
}